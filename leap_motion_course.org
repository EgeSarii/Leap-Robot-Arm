These are notes on the documentation of the Leap Motion Controller and
its API.

This is a guide for the actual implementation of the Leap Motion.
For explanation of structure and device look at [[https://developer-archive.leapmotion.com/documentation/cpp/devguide/Leap_Overview.html][API Overview]].

The overview can be used for the report where extra information can be
given.

* Hello World
The *Frame* object received by your application contains all the known
positions, velocities and identities of tracked entities, such as
hands and fingers.

#+NAME: Hello_world
#+BEGIN_SRC C++
#include <unistd.h>
#include <iostream>
#include <string.h>
#include "Leap.h"

using namespace Leap;

/*
   The connection process is asynchronous and hence a method to obtain
   the data from the sensor is required. In this script a "Listener"
   is used.
 
   A Listener can be added to the Controller, which provides an
   event-based mechanism for responding to important Controller state
   changes.

   Listeners are not always the best idea.
   The reason are:

	1. Listeners use idependent threads to invoke the implemented
           code for each method. When using Listeners, a thread-safe
           programming style should be used.

        2. Overhead might occur when using threads.


  As alternative to Listeners, it is possible to get the Controller
  object for frames.

*/

//In order to use Listeners, the Listener sub-class must be present.
//This class presents the signatures of the functions which should be 
//overwritten.

//Defining Listener Sub-class: 
class SampleListener : public Listener {
    public:
    virtual void onConnect(const Controller&);
    virtual void onFrame(const Controller&);
};

void SampleListener::onConnect(const Controller& controller) {
    std::cout << "Connected" << std::endl;
}

void SampleListener::onFrame(const Controller& controller) {
    const Frame frame = controller.frame();

    std::cout << "Frame id: " << frame.id() << "\n"
              << ", timestamp: " << frame.timestamp() << "\n"
              << ", hands: " << frame.hands().count() << "\n"
              << ", fingers: " << frame.fingers().count() << "\n"
              << "\n";

    sleep(2);
}

int main(int argc, char** argv) {
    SampleListener listener;
    Controller controller; //This object connects automatically to the
                           //Leap motion daemon. Tracking data can be 
                           //done by using the Controller::frame()
                           // method. 
    
    controller.addListener(listener); //Adding instance of Listener class.

    // Keep this process running until Enter is pressed
    std::cout << "Press Enter to quit..." << std::endl;
    std::cin.get();

    // Remove the sample listener when done
    controller.removeListener(listener);
    return 0;
}
#+END_SRC 

*On Connect:*
When your Controller object successfully connects to the Leap Motion
service/daemon AND the Leap Motion hardware is plugged in, The
Controller object changes its /isConnected()/ property to /true/ and
invokes your /Listener::onConnect()/ callback (if there is one).

When the controller connects, you can set controller properties using
such methods as /Controller::setPolicy()/.

*On Frame:*
All the tracking data in the Leap Motion system arrives through the
Frame object. You can get Frame objects from your controller (after it
has connected) by calling the /Controller::frame()/ method. The
/onFrame()/ callback of your Listener subclass is called when a new
frame of data becomes available. When you arenâ€™t using a listener, you
can compare the /id()/ value to that of the last frame you processed to
see if there is a new frame.      


* System Architecture
The Leap Motion software runs as a daemon (on Mac and Linux). The
software connects to the Leap Motion Controller device over the USB
bus. Leap-enabled applications access the Leap Motion service to
receive motion tracking data.
Leap Motion SDK provides two APIs: Native Application Interface and a
WebSoceket Interface.
We use the Native Application Interface (NAI).

This NAI schema is:

#+BEGIN_Example
#######   |------------------|     *************************
# USB #---| Leap service (1) |-----* Leap Settings App (2) *
#######   |------------------|     *************************
             |
             |   ++++++++++++++++++++++++++++++++++++
             |---+ Foreground Leap-anabled App (3)  +
             |   ++++++++++++++++++++++++++++++++++++
             |
             |   +++++++++++++++++++++++++++++++++++
             |---+ Background Leao-enabled App (4) +
                 +++++++++++++++++++++++++++++++++++
#+END_Example
Where:

|----+-------------------------------------------------------------|
| 1) | Receives data from the Leap Motion Controller over the      |
|    | USB bus. It processes the message and it forwards it        |
|    | to the running application. The default is to send data     |
|    | only to the foreground application.                         |
|----+-------------------------------------------------------------|
| 2) | Not really working on Linux.                                |
|----+-------------------------------------------------------------|
| 3) | These applications received data from 1); the two           |
|    | components are connected with Leap Motion native library.   |
|    | BY USING C++ (OR OBJECTIVE-C) THIS LINK IS DONE DIRECTLY,   |
|    | so without wrapper libraries. C++ is hence faster.          |
|----+-------------------------------------------------------------|
| 4) | Background application usually do not receive data from 1). |
|    | This can be configured and permission can be given.         |
|    | We are not going to run the application in background.      |
|----+-------------------------------------------------------------|


* Runtime Configuration
These are configurations which can be set-up for the Leap Motion.
I believe that the default are exactly what we are interested in; but
this documentation [[https://developer-archive.leapmotion.com/documentation/cpp/devguide/Leap_Configuration.html][page]] can be inspected for changes.

There is an interesting paragraph about *Power Saving Options*.
I check the default and add some configurations to the script if something
interesting comes up.

** Power Saving Options
Those include the  the Control Panel Power Saving and Low Resource
Mode settings. Power savings for computers running on battery power is
on by default.
From the documentation I read:

  "The power saving configuration parameters are ignored when images
   are enabled. (Low resource mode is still effective.)"

Since we are not interested in keeping actual images; but just
recording data, I am planning to switch the images off and set up the
power savings options. This is obviously done in order to save energy.

These configuration can be set up in three ways:

	1. _Run from the command line_

        2. _Set up in configuration file_

        3. _Explicitly written in source code_

I am thinking to use the API to set these parameters; another
alternative is to create an bash script to be run before the use of
our system.
At the moment I am more convinced about the first option; so the code
will disable images and configure power energy mode.
The lines are:

#+NAME: set_up_config
#+BEGIN_SRC C++
//Setting images off.
bool areImagesEnabled = controller.config().getInt32("tracking_images_mode") == 0;

/*
  SETTING POWER-MODE CONFIGURATIONS PARAMETER:

 1. acPowerSaver := Limits the frame rate to save power, even when the
                    computer is plugged into AC power.

 2. low_resource_mode_enabled : Limits the frame rate to reduce USB
                                bandwidth.
*/

//Parameter 1:
bool acPowerSaver = controller.config().getBool("power_saving_adapter");
controller.config().setBool("power_saving_adapter", true);

//Parameter 2:
bool lowResourceMode = controller.config().getBool("low_resource_mode_enabled");
controller.config().setBool("low_resource_mode_enabled", true);

//Saving configurations.
controller.config().save();
#+END_SRC

From the documentation I read the following:

  "The effects of these options are not additive. If you enable both
   power saving and low resource modes, the resulting framerate will
   be the minimum value set by either option alone."

Since I do not know how to determine the best parameter, I use the
above notion to let the system decide it by itself.

* Using Tracking API

** Connecting to the controller
Check the controller part in  [[Hello_world]] program above.


** Getting frame
Get Frame objects containing tracking data by calling the
/Controller::frame()/ function. You can call this function whenever your
application is ready to process data to get the most recent set of
data generated by the Leap Motion device. You can also implement a
/Listener/ object defining a callback function and the Controller will
invoke this function when a new frame of data is ready.


** Listening for Controller Events
The Controller object dispatches a number of events using the /Listener/
mechanism. To handle these events, you can extend the /Listener class/
to implement callback functions. The Controller invokes the relevant
callback function when an event occurs.

Examples of events are [[https://developer-archive.leapmotion.com/documentation/cpp/devguide/Leap_Controllers.html][here]], in the Controller Events paragraph.
The useful method for us is

|-----------+--------------------------------------------|
| onFrame() | A new frame of tracking data is available. |
|           | This frame can be taken with the line:     |
|           |                                            |
|           | Frame new_frame = controller.frame();      |
|           |                                            |
|-----------+--------------------------------------------|


** Tracking model
The Leap Motion API defines a class representing each of the primary
tracked objects.
The classes which are of interest for us are:

*** Frame
The Frame object is essentially the root of the data model and
provides access to all the tracked entities. A new Frame is created at
each update interval.

The frame contains lists of the hands and fingers tracked in that
frame. (You can also get the fingers for a specific hand from the
relevant Hand object.)

An example is:
#+NAME: Frame class example
#+BEGIn_SRC C++
Leap::Controller controller;
// wait until Controller.isConnected() evaluates to true
//...

Leap::Frame frame = controller.frame();
Leap::HandList hands = frame.hands();
Leap::PointableList pointables = frame.pointables();
Leap::FingerList fingers = frame.fingers();
Leap::ToolList tools = frame.tools();
#+END_SRC

**** Analysis of Frame class
The Leap Motion API presents motion tracking data to your application
as a series of snapshots called frames. Each frame of tracking data
contains the measured positions and other information about each
entity detected in that snapshot. This article discusses the details
of getting Frame objects from the Leap Motion controller.

When taking frames, check that a controller is connected:
: if( controller.isConnected()) //controller is a Controller object{...}

Obtaining frames by pooling is usually the preferred way. This is
because this method is easier and the missing frames are retrieved
faster.
Due to the processing of a frame, the next one might be skipped and
hence *missed*.
Such frames can be obtained by using the /history/ parameter in the
/frame()/ function.

#+BEGIN_SRC c++
int64_t lastProcessedFrameID = 0;

void nextFrame( Leap::Controller controller )
{
    int64_t currentID = controller.frame().id();
    for( int history = 0; history < currentID - lastProcessedFrameID; history++)
    {
        processNextFrame( controller.frame(history) );
    }
    lastProcessedFrameID = currentID;
}

void processNextFrame( Leap::Frame frame )
{
    if( frame.isValid() )
    {
        //...
    }
}
#+END_SRC


*** Hand
The Hand object describes the position and orientation of a hand,
tracks its motion between frames and contains lists of the fingers
associated with that hand.

#+BEGIN_SRC C++
// hand is a Leap::Hand object
Leap::PointableList pointables = hand.pointables(); // Both fingers and tools
Leap::FingerList fingers = hand.fingers();
#+END_SRC
Something from this class can be what we need: detecting the amount of
fingers.


*** Pointable & Finger
Pointable objects define the basic characteristics common to
fingers. The Finger class extends Pointable with additional
information specific to those entities.


*** Utility classes
Those are other classes which can be used for convenience.
The most interesting ones are:

**** Vector
This class describes points and directions. The Vector class also
provides several useful math functions for working with vectors.

**** Matrix
This class represents things like rotations and other transforms
returned by some functions in the API.
